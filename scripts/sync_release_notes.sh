#!/bin/bash

# Script to sync release notes from GitHub Releases to local markdown file
# Usage: ./sync_release_notes.sh

REPO_OWNER="k-nuth"
REPO_NAME="kth-mono"
NOTES_FILE="doc/release-notes/release-notes.md"

echo "🔄 Syncing release notes from GitHub Releases to ${NOTES_FILE}..."

# Check if gh CLI is available
if ! command -v gh &> /dev/null; then
    echo "❌ GitHub CLI (gh) is required but not installed."
    echo "Install it from: https://cli.github.com/"
    exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "❌ This script must be run from within a git repository."
    exit 1
fi

# Create a temporary file for the new release notes
TEMP_FILE=$(mktemp)
trap "rm -f $TEMP_FILE" EXIT

# Write header
cat > "$TEMP_FILE" << 'EOF'
# Release Notes

This file is automatically generated from GitHub Releases.
Do not edit manually - changes will be overwritten.

EOF

echo "📡 Fetching releases from GitHub..."

# Get all releases (including pre-releases and drafts) and format them
gh release list --repo "${REPO_OWNER}/${REPO_NAME}" --limit 100 --json tagName,name,body,publishedAt,isDraft,isPrerelease | \
jq -r '.[] | select(.isDraft == false) | [.tagName, .name, .body, .publishedAt] | @tsv' | \
while IFS=$'\t' read -r tag_name name body published_at; do
    # Remove 'v' prefix from tag if present for version number
    version=${tag_name#v}
    
    # Format the date
    formatted_date=$(date -d "$published_at" "+%B %d, %Y" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$published_at" "+%B %d, %Y" 2>/dev/null || echo "")
    
    # Write the release section
    {
        echo "# version $version"
        echo ""
        if [ -n "$formatted_date" ]; then
            echo "_Released: $formatted_date_"
            echo ""
        fi
        echo "You can install Knuth node version v$version [using these instructions](https://kth.cash/#download)."
        echo ""
        
        # Process the body - if it's empty or just auto-generated, provide a default
        if [ -z "$body" ] || echo "$body" | grep -q "^## What's Changed"; then
            echo "This release includes the following features and fixes:"
            echo ""
            echo "* Uses [C++ API v$version](https://github.com/k-nuth/node/releases/tag/v$version)."
        else
            # Use the actual release body
            echo "$body"
        fi
        
        echo ""
    } >> "$TEMP_FILE"
done

# Check if we got any releases
if [ ! -s "$TEMP_FILE" ] || [ "$(wc -l < "$TEMP_FILE")" -le 5 ]; then
    echo "❌ No releases found or failed to fetch releases."
    echo "Make sure you have access to the repository and releases exist."
    exit 1
fi

# Create the directory if it doesn't exist
mkdir -p "$(dirname "$NOTES_FILE")"

# Replace the current file
mv "$TEMP_FILE" "$NOTES_FILE"

echo "✅ Release notes synced successfully!"
echo "📄 Updated: $NOTES_FILE"

# Show some stats
release_count=$(grep -c "^# version " "$NOTES_FILE" || echo "0")
echo "📊 Total releases: $release_count"

# Ask if user wants to commit the changes
if git diff --quiet "$NOTES_FILE"; then
    echo "ℹ️  No changes detected in release notes."
else
    echo ""
    echo "📝 Changes detected in $NOTES_FILE"
    echo ""
    echo "Would you like to commit these changes? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy] ]]; then
        git add "$NOTES_FILE"
        git commit -m "docs: sync release notes from GitHub Releases"
        echo "✅ Changes committed!"
    else
        echo "ℹ️  Changes not committed. You can review and commit manually."
    fi
fi
